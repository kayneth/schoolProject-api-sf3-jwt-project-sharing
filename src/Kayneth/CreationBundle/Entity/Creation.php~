<?php

namespace Kayneth\CreationBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use JMS\Serializer\Annotation\ExclusionPolicy;
use JMS\Serializer\Annotation\Expose;
use JMS\Serializer\Annotation\Groups;
use JMS\Serializer\Annotation\VirtualProperty;
use JMS\Serializer\Annotation\AccessorOrder;
use JMS\Serializer\Annotation\SerializedName;
use Kayneth\UserBundle\KaynethUserBundle as User;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Creation
 *
 * @ORM\Table(name="cb_creation")
 * @ORM\Entity(repositoryClass="Kayneth\CreationBundle\Repository\CreationRepository")
 * @ORM\HasLifecycleCallbacks
 * @ExclusionPolicy("none")
 */
class Creation
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     *
     * @Expose
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="title", type="string", length=255)
     *
     * @Expose
     */
    private $title;

    /**
     * @var string
     *
     * @Gedmo\Slug(fields={"title"})
     * @ORM\Column(name="slug", type="string", length=255, unique=true)
     *
     * @Expose
     */
    private $slug;

    /**
     * @var string
     *
     * @ORM\Column(name="link", type="string", length=255)
     *
     * @Expose
     */
    private $link;

    /**
     * @ORM\OneToOne(targetEntity="Kayneth\FileBundle\Entity\File", cascade={"persist", "remove"})
     */
    private $image;

    /**
     * @var string
     *
     * @ORM\Column(name="description", type="text")
     *
     * @Expose
     */
    private $description;

    /**
     * @var \DateTime
     *
     * @Gedmo\Timestampable(on="create")
     * @ORM\Column(name="created_at", type="datetime")
     *
     * @Expose
     */
    private $createdAt;

    /**
     * @var \DateTime
     *
     * @Gedmo\Timestampable(on="update")
     * @ORM\Column(name="updated_at", type="datetime", nullable=true)
     *
     * @Expose
     */
    private $updatedAt;


    /**
     * @var User $user
     *
     * @Gedmo\Blameable(on="create")
     * @ORM\ManyToOne(targetEntity="Kayneth\UserBundle\Entity\User")
     * @ORM\JoinColumn(nullable=false)
     *
     * @Expose
     */
    private $user;

    /**
     *
     * @ORM\ManyToOne(targetEntity="Kayneth\CreationBundle\Entity\Category")
     * @ORM\JoinColumn(nullable=false)
     *
     * @Expose
     */
    private $category;

    /**
     * @ORM\OneToMany(targetEntity="Kayneth\CreationBundle\Entity\Comment", mappedBy="creation")
     *
     * @Expose
     */
    private $comments;

    /**
     * @ORM\OneToMany(targetEntity="Kayneth\CreationBundle\Entity\Score", mappedBy="creation")
     *
     * @Expose
     */
    private $scores;

    private $imageDir;


    /**
     * Constructor
     */
    public function __construct()
    {
        $this->comments = new \Doctrine\Common\Collections\ArrayCollection();
    }


    /**
     * @Assert\IsTrue(message = "La crÃ©ation doit disposer d'une image ou d'un lien")
     */
    public function hasLinkOrFile()
    {
        if($this->image == null && $this->link == null)
        {
            return false;
        }
        return true;
    }


    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set title
     *
     * @param string $title
     *
     * @return Creation
     */
    public function setTitle($title)
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Get title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set slug
     *
     * @param string $slug
     *
     * @return Creation
     */
    public function setSlug($slug)
    {
        $this->slug = $slug;

        return $this;
    }

    /**
     * Get slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->slug;
    }

    /**
     * Set link
     *
     * @param string $link
     *
     * @return Creation
     */
    public function setLink($link)
    {
        $this->link = $link;

        return $this;
    }

    /**
     * Get link
     *
     * @return string
     */
    public function getLink()
    {
        return $this->link;
    }

    /**
     * Set description
     *
     * @param string $description
     *
     * @return Creation
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set createdAt
     *
     * @param \DateTime $createdAt
     *
     * @return Creation
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Get createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * Set updatedAt
     *
     * @param \DateTime $updatedAt
     *
     * @return Creation
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Get updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }

    /**
     * Set image
     *
     * @param \Kayneth\FileBundle\Entity\File $image
     *
     * @return Creation
     */
    public function setImage(\Kayneth\FileBundle\Entity\File $image = null)
    {
        $this->image = $image;
        $this->setImageDir();
        return $this;
    }
    /**
     * Get image
     *
     * @return \Kayneth\FileBundle\Entity\File
     */
    public function getImage()
    {
        if ($this->image != null) {
            $this->setImageDir();
        }
        return $this->image;
    }

    /**
     * @ORM\PostPersist()
     * @ORM\PostUpdate()
     */
    public function setImageDir()
    {
        $this->imageDir = "uploads/files/creation/".$this->id."/image";
        $this->image->setUploadDir($this->imageDir);
        return $this;
    }

    /**
     * @VirtualProperty
     * @SerializedName("imageLink")
     *
     * @return string
     */
    public function getImageLink()
    {
        if($this->image != null)
        {
            $this->setImageDir();
            $dir = $this->image->getWebPath();
            return $dir;
        }
        return $dir="null";
    }

    /**
     * Set user
     *
     * @param \Kayneth\UserBundle\Entity\User $user
     *
     * @return Creation
     */
    public function setUser(\Kayneth\UserBundle\Entity\User $user)
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Get user
     *
     * @return \Kayneth\UserBundle\Entity\User
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * Set category
     *
     * @param \Kayneth\CreationBundle\Entity\Category $category
     *
     * @return Creation
     */
    public function setCategory(\Kayneth\CreationBundle\Entity\Category $category)
    {
        $this->category = $category;

        return $this;
    }

    /**
     * Get category
     *
     * @return \Kayneth\CreationBundle\Entity\Category
     */
    public function getCategory()
    {
        return $this->category;
    }

    /**
     * Add comment
     *
     * @param \Kayneth\CreationBundle\Entity\Comment $comment
     *
     * @return Creation
     */
    public function addComment(\Kayneth\CreationBundle\Entity\Comment $comment)
    {
        $this->comments[] = $comment;

        return $this;
    }

    /**
     * Remove comment
     *
     * @param \Kayneth\CreationBundle\Entity\Comment $comment
     */
    public function removeComment(\Kayneth\CreationBundle\Entity\Comment $comment)
    {
        $this->comments->removeElement($comment);
    }

    /**
     * Get comments
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getComments()
    {
        return $this->comments;
    }

    /**
     * Add score
     *
     * @param \Kayneth\CreationBundle\Entity\Score $score
     *
     * @return Creation
     */
    public function addScore(\Kayneth\CreationBundle\Entity\Score $score)
    {
        $this->scores[] = $score;

        return $this;
    }

    /**
     * Remove score
     *
     * @param \Kayneth\CreationBundle\Entity\Score $score
     */
    public function removeScore(\Kayneth\CreationBundle\Entity\Score $score)
    {
        $this->scores->removeElement($score);
    }

    /**
     * Get scores
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getScores()
    {
        return $this->scores;
    }

    /**
     * @VirtualProperty
     * @SerializedName("scoreAverage")
     *
     * @return integer
     */
    public function getAverageScore() {
        $average = null;

        if($this->scores->count() == 0){
            return '~';
        }

        foreach($this->scores as $score) {
            $average .= $score->getNote();
        }

        $average = $average / $this->scores->count();

        return $average;
    }
}
